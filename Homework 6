//TASK 1
public class Main {
  public static int smallest(int[] array) {
    int min = array[0];

    for(int i = 0; i < array.length; i++) {
      if(array[i] < min) {
        min = array[i];
      }
    }
    
    return min;
  }

  public static void main(String[] args) {
    int[] numbers = {6, 5, 8, 7, 11};
    System.out.println("smallest number is: " + smallest(numbers));
  }
}

//TASK 2
public class Main {
  public static int indexOfTheSmallest(int[] array) {
    int indexOfSmallest = 0;

    for(int i = 0; i < array.length; i++) {
      if(array[i] < array[0]) {
        indexOfSmallest = i;
      }
    }
    return indexOfSmallest;
  }

  public static void main(String[] args) {
    int[] numbers = {6, 5, 8, 7, 11};
    System.out.println("index of the smallest number is: " + indexOfTheSmallest(numbers));
  }
}
//TASK 3

public class Main {
  public static int indexOfTheSmallestStartingFrom(int[] array, int index) {
    int indexOfMin = index;

    for(int i = index; i < array.length; i++) {
      if(array[i] < array[indexOfMin]) {
        indexOfMin = i;
      }
    }

    return indexOfMin;
  }

  public static void main(String[] args) {
    int[] numbers = {-1, 6, 9, 8, 12};

    System.out.println(indexOfTheSmallestStartingFrom(numbers, 1));
    System.out.println(indexOfTheSmallestStartingFrom(numbers, 2));
    System.out.println(indexOfTheSmallestStartingFrom(numbers, 4));
  }
}
//TASK 4

public class Main {
  public static void swap(int[] array, int index1, int index2) {
    int temp = array[index1];
    array[index1] = array[index2];
    array[index2] = temp;
  }

  public static void main(String[] args) {
    int[] numbers = {3, 2, 5, 4, 8};

    System.out.println(Arrays.toString(numbers));

    swap(numbers, 1, 0);
    System.out.println(Arrays.toString(numbers));

    swap(numbers, 0, 3);
    System.out.println(Arrays.toString(numbers));
  }
}

//TASK 5
public class Main {
 public static void main(String[] args) {
    int[] array = {-3, 2, 3, 4, 7, 8, 12};
    Scanner reader = new Scanner(System.in);

    System.out.println("The array: " + Arrays.toString(array));
    System.out.print("Enter number: ");
    int num = Integer.parseInt(reader.nextLine());

    BinarySearch searcer = new BinarySearch();
    boolean result = searcer.search(array, num);
    
    if(result) {
      System.out.println("The number " + num + " is in the array");
    } else {
      System.out.println("The number " + num + " is not in the array");
    }

  }
  public class BinarySearch {
  public boolean search(int[] array, int number) {
    int start = 0;
    int end = array.length - 1;
    boolean result = false;

    while(start <= end) {
      int middle = (start + end) / 2;

      if(number > array[middle]) {
        start = middle + 1;
      } else if(number < array[middle]) {
        end = middle - 1;
      } else {
        result = true;
        break;
      }
    }
    return result;
  }
}
  //TASK 6
  
  public class Main {
  public static void printElegantly(int[] array) {
    for(int i = 0; i < array.length; i++) {
      if(i == array.length - 1) {
        System.out.println(array[i]);
      } else {
        System.out.print(array[i] + ", ");
      }
    }
  }

  public static void main(String[] args) {
    int[] numbers = {5, 1, 3, 4, 2};
    printElegantly(numbers);
  }
}

//TASK 7

public class Main {
  public static void main(String[] args) {
    NightSky nightSky = new NightSky(0.1, 40, 10);
    nightSky.printLine();
  }
}
public class NightSky {
  private double density;
  private int width;
  private int height;
  private Random random;

  public NightSky(double density) {
    this.density = density;
    this.width = 20;
    this.height = 10;
    this.random = new Random();
  }

  public NightSky(int width, int height) {
    this.density = 0.1;
    this.width = width;
    this.height = height;
    this.random = new Random();
  }

  public NightSky(double density, int width, int height) {
    this.density = density;
    this.width = width;
    this.height = height;
    this.random = new Random();
  }

  public void printLine() {
    int starCount = (int) (((double) this.width /100) * (this.density * 100));
    int counter = 0;

    for(int i = 0; i <= this.width; i++) {
      
      double p = random.nextDouble();
      double q = 1-p;
      

        if(p > q) {
          if(counter <= starCount) {
            System.out.print("*");
            counter++;
          }
        } else {
          System.out.print(" ");
        }
    }
  }

}
}

//TASK 8

public class Library {
  private ArrayList<Book> books;

  public Library() {
    this.books = new ArrayList<Book>();
  }

  public void addBook(Book book) {
    this.books.add(book);
  }

  public void searchByTitle(String title) {
    for(int i = 0; i < books.size(); i++) {
      if(((books.get(i)).title()).equals(title)) {
        System.out.print(books.get(i));
      }
    }
  }

  public void searchByPublisher(String publisher) {
    for(int i = 0; i < books.size(); i++) {
      if(((books.get(i)).publisher()).equals(publisher)) {
        System.out.print(books.get(i));
      }
    }
  }

  public void searchByYear(int year) {
    for(int i = 0; i < books.size(); i++) {
      if(((books.get(i)).year()) == year) {
        System.out.print(books.get(i));
      }
    }
  }
}
